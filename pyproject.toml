[project]
name = "mcp-office-excel"
version = "1.0.0"
description = "Excel server for processing Excel files."
readme = "README.md"
requires-python = ">=3.11"
authors = [
    {name = "LuiccianDev", email = "luicciandev@gmail.com"}
]
license = {text = "MIT"}
keywords = ["mcp", "excel", "office", "document-processing", "xlsx", "automation"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
]

[project.urls]
Homepage = "https://github.com/LuiccianDev/mcp_excel_office"
Repository = "https://github.com/LuiccianDev/mcp_excel_office"
Documentation = "https://github.com/LuiccianDev/mcp_excel_office/blob/master/README.md"
issues = "https://github.com/LuiccianDev/mcp_excel_office/issues"
Changelog = "https://github.com/LuiccianDev/mcp_excel_office/blob/master/CHANGELOG.md"

dependencies = [
    "mcp[cli]>=1.10.1",
    "openpyxl>=3.1.5",
    "psycopg2>=2.9.10",
    "typer>=0.16.0",
]

[project.scripts]
mcp_server_excel = "mcp_excel:create_server"

[dependency-groups]
dev = [
    "black>=25.1.0",
    "isort>=6.0.1",
    "mypy>=1.17.0",
    "pytest>=8.4.1",
    "pytest-asyncio>=1.1.0",
    "pytest-cov>=6.2.1",
    "ruff>=0.12.5",
]
# Configuración de Black (formateador)
[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
skip-string-normalization = true # Evita la normalización de cadenas
extend-exclude = '''
# Directorios o archivos a excluir
(
  __pycache__
  | \.git
  | \.venv
  | build
  | dist
)
'''
# Configuración de isort (organizar imports)
[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
skip_glob = ["__pycache__", ".git", ".venv", "build", "dist"]

# Configuración de MyPy (verificador de tipos)
[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true # Usar el type: ignore[misc] al inicio de la linea siguiente del decorador validate_file_access
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true
ignore_missing_imports = true

# Configuración de Ruff (linting y formateo)
[tool.ruff]
line-length = 88
target-version = "py311"

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
    "N",  # pep8-naming
    "S",  # bandit
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "S101",  # use of assert detected (pytest uses assert)
    "S110",  #! raise exception in __init__ or any files after remove
    "S112",  #! use of assert detected (pytest uses assert) after remove
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["S101", "S106", "S108"]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
line-ending = "auto"

# configuarcionde pytest
[tool.pytest.ini_options]

testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
pythonpath = ["."]
asyncio_mode = "auto"
# Configuración de cobertura (pytest-cov)
addopts = [
    "--cov=src/mcp_excel",           # Directorio a cubrir
    "--cov-report=term-missing",     # Mostrar líneas no cubiertas en terminal
    "--cov-report=html:htmlcov",     # Generar reporte HTML
    "--cov-report=xml:coverage.xml", # Generar reporte XML
    "--cov-fail-under=80",           # Fallar si cobertura < 80%
    "--strict-markers",              # Requerir markers definidos
    "--disable-warnings",            # Deshabilitar warnings por defecto
    "-v",                            # Modo verbose
    "--tb=short"                     # Formato corto de tracebacks
]

# Markers personalizados
markers = [
    "slow: marca tests que tardan mucho en ejecutarse",
    "integration: marca tests de integración",
    "unit: marca tests unitarios",
    "asyncio: marca tests asíncronos",
    "excel: marca tests relacionados con Excel",
    "mcp: marca tests relacionados con MCP"
]

# Filtros de warnings
filterwarnings = [
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
    # Agregar warnings específicos si es necesario
]

# Configuración de logging durante tests
log_cli = true
log_cli_level = "INFO"
log_cli_format = "%(asctime)s [%(levelname)8s] %(name)s: %(message)s"
log_cli_date_format = "%Y-%m-%d %H:%M:%S"

# Archivos y directorios a ignorar
norecursedirs = [
    "*.egg",
    ".eggs",
    "dist",
    "build",
    "docs",
    ".tox",
    ".git",
    "__pycache__"
]
[tool.coverage.run]
# Configuración adicional de cobertura
source = ["src/mcp_excel"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/site-packages/*",
    "*/venv/*",
    "*/.venv/*"
]

[tool.coverage.report]
# Configuración del reporte de cobertura
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ .__main__.:"
]

[tool.coverage.html]
# Configuración del reporte HTML
directory = "htmlcov"
