[project]
name = "mcp_excel"
version = "1.0.0"
description = "MCP Excel Office Server - Excel manipulation through Model Context Protocol"
readme = "README.md"
requires-python = ">=3.11"
authors = [
    {name = "LuiccianDev", email = "luicciandev@gmail.com"}
]
license = {text = "MIT"}
keywords = ["mcp", "excel", "office", "document-processing", "xlsx", "automation", "model-context-protocol"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
]
dependencies = [
    "mcp[cli]>=1.12.2",
    "openpyxl>=3.1.5",
    "psycopg2>=2.9.10",
    "typer>=0.16.0",
]

[project.urls]
Homepage = "https://github.com/LuiccianDev/mcp_excel_office"
Repository = "https://github.com/LuiccianDev/mcp_excel_office"
Documentation = "https://github.com/LuiccianDev/mcp_excel_office/blob/master/README.md"
issues = "https://github.com/LuiccianDev/mcp_excel_office/issues"
Changelog = "https://github.com/LuiccianDev/mcp_excel_office/blob/master/CHANGELOG.md"



[dependency-groups]
dev = [
    "mypy>=1.17.0",
    "pre-commit>=4.2.0",
    "ruff>=0.12.5",
]
test = [
    "pytest>=8.4.1",
    "pytest-asyncio>=1.1.0",
    "pytest-cov>=6.2.1",
]

[project.scripts]
mcp_excel_office = "mcp_excel.__main__:main"

[project.entry-points."mcp.servers"]
mcp_excel_office = "mcp_excel.__main__:main"


[tool.hatch.build.targets.wheel]
packages = ["src/mcp_excel"]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

# MyPy Configuration (Type Checker)
[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true # Usar el type: ignore[misc] al inicio de la linea siguiente del decorador validate_file_access
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true
ignore_missing_imports = true
exclude = ["tests/", "build", ".venv"]
explicit_package_bases = true
files = ["src"]


# Pytest Configuration
[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
pythonpath = ["src"]
asyncio_mode = "auto"
# Coverage Configuration (pytest-cov)
addopts = [
    "--cov=src/mcp_excel/tools",     # Directory to cover
    "--cov-report=term-missing",     # Show uncovered lines in terminal
    "--cov-report=html:htmlcov",     # Generate HTML report
    "--cov-report=xml:coverage.xml", # Generate XML report
    "--cov-fail-under=20",           # Fail if coverage < 20%
    "--strict-markers",              # Require defined markers
    "--disable-warnings",            # Disable warnings by default
    "-v",                            # Verbose mode
    "--tb=short"                     # Short traceback format
]

# Custom markers
markers = [
    "slow: marks tests that take a long time to run",
    "integration: marks integration tests",
    "unit: marks unit tests",
    "asyncio: marks asynchronous tests",
    "excel: marks Excel-related tests",
    "mcp: marks MCP-related tests"
]

# Warning filters
filterwarnings = [
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
    # Add specific warnings if needed
]

# Logging configuration during tests
log_cli = true
log_cli_level = "INFO"
log_cli_format = "%(asctime)s [%(levelname)8s] %(name)s: %(message)s"
log_cli_date_format = "%Y-%m-%d %H:%M:%S"

# Files and directories to ignore
norecursedirs = [
    "*.egg",
    ".eggs",
    "dist",
    "build",
    "docs",
    ".tox",
    ".git",
    "__pycache__"
]
[tool.coverage.run]
# Additional coverage configuration
source = ["src/mcp_excel/tools"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/site-packages/*",
    "*/venv/*",
    "*/.venv/*"
]

[tool.coverage.report]
# Coverage report configuration
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == '__main__':"
]

[tool.coverage.html]
# HTML report configuration
directory = "htmlcov"
